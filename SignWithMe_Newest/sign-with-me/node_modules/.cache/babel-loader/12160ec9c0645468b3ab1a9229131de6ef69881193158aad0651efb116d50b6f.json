{"ast":null,"code":"var _jsxFileName = \"/Users/brandonboston/Desktop/SignWithMe/SignWithMe_Newest/sign-with-me/src/components/UnitSet.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\"; // Import axios\n// import \"./UnitSet.css\";\n// import { CircularProgressbar } from \"react-circular-progressbar\";\n// import \"react-circular-progressbar/dist/styles.css\";\n\n// const UnitSet = () => {\n//   const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\n//   const [openLesson, setOpenLesson] = useState(null); // Tracks which lesson dropdown is open\n//   const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedFinger, setquizCompletedFinger] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedGrammer, setquizCompletedGrammer] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedNounAdj, setquizCompletedNounAdj] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedVerbColors, setquizCompletedVerbColors] = useState(false); // Tracks if the quiz for lesson 101 is completed\n\n//   // Check if the user is signed in and retrieve their username\n//   const userName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     if (userName) {\n//       // Unit 1\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"101\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedAlpha(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"102\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedFinger(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"103\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedGreetings(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       // Unit 2\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"201\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedGrammer(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"202\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedNounAdj(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"203\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedVerbColors(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n//     } else {\n//       setquizCompletedAlpha(false);\n//       setquizCompletedFinger(false);\n//       setquizCompletedGreetings(false);\n//       setquizCompletedGrammer(false);\n//       setquizCompletedNounAdj(false);\n//       setquizCompletedVerbColors(false);\n//     }\n//   }, [userName]);\n\n//   const toggleUnit = (unit) => {\n//     setOpenUnit(openUnit === unit ? null : unit);\n//     setOpenLesson(null); // Close any lesson dropdowns when toggling units\n//   };\n\n//   const toggleLesson = (lesson) => {\n//     setOpenLesson(openLesson === lesson ? null : lesson);\n//   };\n//   const progress = quizCompletedGreetings ? 100 : 0; // Progress is either 0% or 100%\n\n//   return (\n//     <div className=\"unitset-container\">\n//       <h1 style={{fontSize: '50px' }} >Units Dashboard</h1>\n//       <div className=\"unitset-list\">\n//         {/* Unit 1 */}\n//         <div style={{fontSize: '25px' }} >\n//           <button  onClick={() => toggleUnit(1)} className=\"unit-button\">\n//             Unit 1: Basics\n//             {quizCompletedAlpha &&\n//               quizCompletedFinger &&\n//               quizCompletedGreetings && (\n//                 <span>üèÜ</span>\n//               )}\n//           </button>\n//           {openUnit === 1 && (\n//             <div  className=\"lesson-dropdown\">\n//               <Link to=\"/units/lesson1\" className=\"lesson-link\">\n//                 Alphabet{\" \"}\n//                 {quizCompletedAlpha && (\n//                 <span>üèÜ</span>\n//               )}\n//               </Link>\n//               <Link to=\"/units/lesson2\" className=\"lesson-link\">\n//                 Finger Spelling{\" \"}\n//                 {quizCompletedFinger && (\n//                 <span>üèÜ</span>\n//                 )}\n//               </Link>\n//               <Link to=\"/units/lesson3\" className=\"lesson-link\">\n//                 Greetings{\" \"}\n//                 {quizCompletedGreetings && (\n//                   <span>üèÜ</span>\n//                 )}\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={progress}\n//                     text={`${progress}%`}\n//                     styles={{\n//                       path: { stroke: quizCompletedGreetings ? \"green\" : \"red\" },\n//                       text: { fill: quizCompletedGreetings ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n\n//               </Link>\n//             </div>\n//           )}\n//         </div>\n//         <div style={{fontSize: '25px' }} >\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\n//             Unit 2: Intermediate\n//             {quizCompletedGrammer &&\n//               quizCompletedNounAdj &&\n//               quizCompletedVerbColors && (\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//               )}\n//           </button>\n//           {openUnit === 2 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/lesson4\" className=\"lesson-link\">\n//                 Grammer{\" \"}\n//                 {quizCompletedGrammer && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )}\n//               </Link>\n//               <Link to=\"/units/lesson5/N_A\" className=\"lesson-link\">\n//                 Nouns and Adjectives{\" \"}\n//                 {quizCompletedNounAdj && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )}\n//               </Link>\n//               <Link to=\"/units/lesson6\" className=\"lesson-link\">\n//                 Verbs and Colors{\" \"}\n//                 {quizCompletedVerbColors && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )}\n//               </Link>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Unit 3 */}\n//         <div style={{fontSize: '25px' }} >\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\n//             Unit 3: Advanced\n//           </button>\n//           {openUnit === 3 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/lesson7\" className=\"lesson-link\">\n//                 Numbers{\" \"}\n//                 {/* {quizCompletedAlpha && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )} */}\n//               </Link>\n\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Final */}\n//         <div style={{fontSize: '25px' }}>\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\n//             Final Examination\n//           </button>\n//           {openUnit === 4 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/Final\" className=\"lesson-link\">\n//                 Final Exam{\" \"}\n//               {quizCompletedAlpha && (\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//               )}\n//             </Link>\n\n//           </div>\n//         )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default UnitSet;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"./UnitSet.css\";\n// import { CircularProgressbar } from \"react-circular-progressbar\";\n// import \"react-circular-progressbar/dist/styles.css\";\n\n// const UnitSet = () => {\n//   const [openUnit, setOpenUnit] = useState(null);\n//   const [quizStatus, setQuizStatus] = useState({\n//     alpha: false,\n//     finger: false,\n//     greetings: false,\n//     grammar: false,\n//     nounAdj: false,\n//     verbColors: false,\n//   });\n\n//   const userName = localStorage.getItem(\"userName\");\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchQuizStatus = async (lessonId, key) => {\n//       try {\n//         const response = await axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: { lessonId, userName },\n//         });\n//         if (response.data.lesson?.quiz_complete) {\n//           setQuizStatus((prev) => ({ ...prev, [key]: true }));\n//         }\n//       } catch (error) {\n//         console.error(`Error fetching data for lesson ${lessonId}:`, error);\n//       }\n//     };\n\n//     if (userName) {\n//       fetchQuizStatus(\"101\", \"alpha\");\n//       fetchQuizStatus(\"102\", \"finger\");\n//       fetchQuizStatus(\"103\", \"greetings\");\n//       fetchQuizStatus(\"201\", \"grammar\");\n//       fetchQuizStatus(\"202\", \"nounAdj\");\n//       fetchQuizStatus(\"203\", \"verbColors\");\n//     }\n//   }, [userName]);\n\n//   const toggleUnit = (unit) => {\n//     setOpenUnit(openUnit === unit ? null : unit);\n//   };\n\n//   const handleNavigate = (path) => {\n//     navigate(path);\n//   };\n\n//   const progress = {\n//     alpha: quizStatus.alpha ? 100 : 0,\n//     finger: quizStatus.finger ? 100 : 0,\n//     greetings: quizStatus.greetings ? 100 : 0,\n//     grammar: quizStatus.grammar ? 100 : 0,\n//     nounAdj: quizStatus.nounAdj ? 100 : 0,\n//     verbColors: quizStatus.verbColors ? 100 : 0,\n//   };\n\n//   return (\n//     <div className=\"unitset-container\">\n//       <h1 style={{ fontSize: \"50px\" }}>Units Dashboard</h1>\n//       <div className=\"unitset-list\">\n//         {/* Unit 1 */}\n//         <div style={{ fontSize: \"25px\" }}>\n//           <button onClick={() => toggleUnit(1)} className=\"unit-button\">\n//             Unit 1: Basics\n//             {quizStatus.alpha && quizStatus.finger && quizStatus.greetings && <span>üèÜ</span>}\n//           </button>\n//           {openUnit === 1 && (\n//             <div className=\"lesson-dropdown\">\n//               <div className=\"lesson-container\">\n//                 <h3>Alphabet {quizStatus.alpha && <span>üèÜ</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson1\")} className=\"lesson-button\">\n//                   Go to Alphabet Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.alpha ? 100 : 0}\n//                     text={`${quizStatus.alpha ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.alpha ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.alpha ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//               <div className=\"lesson-container\">\n//                 <h3>Finger Spelling {quizStatus.finger && <span>üèÜ</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson2\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.finger ? 100 : 0}\n//                     text={`${quizStatus.finger ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.finger ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.finger ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//               <div className=\"lesson-container\">\n//                 <h3>Greetings {quizStatus.greetings && <span>üèÜ</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson3\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.greetings ? 100 : 0}\n//                     text={`${quizStatus.greetings ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.greetings ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.greetings ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Unit 2 */}\n//         <div style={{ fontSize: \"25px\" }}>\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\n//             Unit 2: Intermediate\n//             {quizStatus.grammar && quizStatus.nounAdj && quizStatus.verbColors && <span>‚úî</span>}\n//           </button>\n//           {openUnit === 2 && (\n//             <div className=\"lesson-dropdown\">\n//               <div className=\"lesson-container\">\n//                 <h3>Grammar {quizStatus.grammar && <span>‚úî</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson4\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.grammar ? 100 : 0}\n//                     text={`${quizStatus.grammar ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.grammar ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.grammar ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//               <div className=\"lesson-container\">\n//                 <h3>Nouns and Adjectives {quizStatus.nounAdj && <span>‚úî</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson5/N_A\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.nounAdj ? 100 : 0}\n//                     text={`${quizStatus.nounAdj ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.nounAdj ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.nounAdj ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//               <div className=\"lesson-container\">\n//                 <h3>Verbs and Colors {quizStatus.verbColors && <span>‚úî</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson6\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.verbColors ? 100 : 0}\n//                     text={`${quizStatus.verbColors ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.verbColors ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.verbColors ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Unit 3 */}\n//         <div style={{ fontSize: \"25px\" }}>\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\n//             Unit 3: Advanced\n//           </button>\n//           {openUnit === 3 && (\n//             <div className=\"lesson-dropdown\">\n//               <div className=\"lesson-container\">\n//                 <h3>Numbers</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson7\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Final */}\n//         <div style={{ fontSize: \"25px\" }}>\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\n//             Final Examination\n//           </button>\n//           {openUnit === 4 && (\n//             <div className=\"lesson-dropdown\">\n//               <div className=\"lesson-container\">\n//                 <h3>Final Exam</h3>\n//                 <button onClick={() => handleNavigate(\"/units/Final\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default UnitSet;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./UnitSet.css\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UnitSet = () => {\n  _s();\n  const [openUnit, setOpenUnit] = useState(null);\n  const [quizStatus, setQuizStatus] = useState({});\n  const userName = localStorage.getItem(\"userName\");\n  const navigate = useNavigate();\n  const lessons = {\n    1: [{\n      id: \"101\",\n      key: \"alpha\",\n      title: \"Alphabet\",\n      path: \"/units/lesson1\"\n    }, {\n      id: \"102\",\n      key: \"finger\",\n      title: \"Finger Spelling\",\n      path: \"/units/lesson2\"\n    }, {\n      id: \"103\",\n      key: \"greetings\",\n      title: \"Greetings\",\n      path: \"/units/lesson3\"\n    }],\n    2: [{\n      id: \"201\",\n      key: \"grammar\",\n      title: \"Grammar\",\n      path: \"/units/lesson4\"\n    }, {\n      id: \"202\",\n      key: \"nounAdj\",\n      title: \"Nouns and Adjectives\",\n      path: \"/units/lesson5/N_A\"\n    }, {\n      id: \"203\",\n      key: \"verbColors\",\n      title: \"Verbs and Colors\",\n      path: \"/units/lesson6\"\n    }],\n    3: [{\n      id: \"301\",\n      key: \"numbers\",\n      title: \"Numbers\",\n      path: \"/units/lesson7\"\n    }],\n    4: [{\n      id: \"401\",\n      key: \"finalExam\",\n      title: \"Final Exam\",\n      path: \"/units/Final\"\n    }]\n  };\n  useEffect(() => {\n    const fetchQuizStatuses = async () => {\n      try {\n        const promises = Object.values(lessons).flat().map(({\n          id,\n          key\n        }) => axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n          params: {\n            lessonId: id,\n            userName\n          }\n        }).then(response => {\n          var _response$data$lesson;\n          if ((_response$data$lesson = response.data.lesson) !== null && _response$data$lesson !== void 0 && _response$data$lesson.quiz_complete) {\n            setQuizStatus(prev => ({\n              ...prev,\n              [key]: true\n            }));\n          }\n        }));\n        await Promise.all(promises);\n      } catch (error) {\n        console.error(\"Error fetching quiz statuses:\", error);\n      }\n    };\n    if (userName) fetchQuizStatuses();\n  }, [userName]);\n  const toggleUnit = unit => {\n    setOpenUnit(openUnit === unit ? null : unit);\n  };\n  const handleNavigate = path => {\n    navigate(path);\n  };\n  const getProgress = key => quizStatus[key] ? 100 : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unitset-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        fontSize: \"50px\"\n      },\n      children: \"Units Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unitset-list\",\n      children: Object.entries(lessons).map(([unitNumber, unitLessons]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: \"25px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleUnit(unitNumber),\n          className: \"unit-button\",\n          children: [`Unit ${unitNumber}: ${unitNumber === \"1\" ? \"Basics\" : unitNumber === \"2\" ? \"Intermediate\" : unitNumber === \"3\" ? \"Advanced\" : \"Final Examination\"}`, unitLessons.every(({\n            key\n          }) => quizStatus[key]) && /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uD83C\\uDFC6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 67\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 13\n        }, this), openUnit === unitNumber && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lesson-dropdown\",\n          children: unitLessons.map(({\n            id,\n            key,\n            title,\n            path\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lesson-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [title, \" \", quizStatus[key] && /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"\\uD83C\\uDFC6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 615,\n                columnNumber: 51\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleNavigate(path),\n              className: \"lesson-button\",\n              children: \"Go to Lesson\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress-container\",\n              children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n                value: getProgress(key),\n                text: `${getProgress(key)}%`,\n                styles: {\n                  path: {\n                    stroke: quizStatus[key] ? \"green\" : \"red\"\n                  },\n                  text: {\n                    fill: quizStatus[key] ? \"green\" : \"red\"\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 624,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 623,\n              columnNumber: 21\n            }, this)]\n          }, `lesson-${id}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 15\n        }, this)]\n      }, `unit-${unitNumber}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 591,\n    columnNumber: 5\n  }, this);\n};\n_s(UnitSet, \"ltmTBuX94ECzGHcBSglG2unIrxQ=\", false, function () {\n  return [useNavigate];\n});\n_c = UnitSet;\nexport default UnitSet;\nvar _c;\n$RefreshReg$(_c, \"UnitSet\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","CircularProgressbar","jsxDEV","_jsxDEV","UnitSet","_s","openUnit","setOpenUnit","quizStatus","setQuizStatus","userName","localStorage","getItem","navigate","lessons","id","key","title","path","fetchQuizStatuses","promises","Object","values","flat","map","get","params","lessonId","then","response","_response$data$lesson","data","lesson","quiz_complete","prev","Promise","all","error","console","toggleUnit","unit","handleNavigate","getProgress","className","children","style","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","entries","unitNumber","unitLessons","onClick","every","value","text","styles","stroke","fill","_c","$RefreshReg$"],"sources":["/Users/brandonboston/Desktop/SignWithMe/SignWithMe_Newest/sign-with-me/src/components/UnitSet.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import axios from \"axios\"; // Import axios\r\n// import \"./UnitSet.css\";\r\n// import { CircularProgressbar } from \"react-circular-progressbar\";\r\n// import \"react-circular-progressbar/dist/styles.css\";\r\n\r\n\r\n// const UnitSet = () => {\r\n//   const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\r\n//   const [openLesson, setOpenLesson] = useState(null); // Tracks which lesson dropdown is open\r\n//   const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedFinger, setquizCompletedFinger] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedGrammer, setquizCompletedGrammer] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedNounAdj, setquizCompletedNounAdj] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedVerbColors, setquizCompletedVerbColors] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n\r\n//   // Check if the user is signed in and retrieve their username\r\n//   const userName = localStorage.getItem(\"userName\");\r\n\r\n//   useEffect(() => {\r\n//     if (userName) {\r\n//       // Unit 1\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"101\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedAlpha(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"102\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedFinger(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"103\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedGreetings(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       // Unit 2\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"201\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedGrammer(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"202\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedNounAdj(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"203\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedVerbColors(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n//     } else {\r\n//       setquizCompletedAlpha(false);\r\n//       setquizCompletedFinger(false);\r\n//       setquizCompletedGreetings(false);\r\n//       setquizCompletedGrammer(false);\r\n//       setquizCompletedNounAdj(false);\r\n//       setquizCompletedVerbColors(false);\r\n//     }\r\n//   }, [userName]);\r\n\r\n//   const toggleUnit = (unit) => {\r\n//     setOpenUnit(openUnit === unit ? null : unit);\r\n//     setOpenLesson(null); // Close any lesson dropdowns when toggling units\r\n//   };\r\n\r\n//   const toggleLesson = (lesson) => {\r\n//     setOpenLesson(openLesson === lesson ? null : lesson);\r\n//   };\r\n//   const progress = quizCompletedGreetings ? 100 : 0; // Progress is either 0% or 100%\r\n\r\n//   return (\r\n//     <div className=\"unitset-container\">\r\n//       <h1 style={{fontSize: '50px' }} >Units Dashboard</h1>\r\n//       <div className=\"unitset-list\">\r\n//         {/* Unit 1 */}\r\n//         <div style={{fontSize: '25px' }} >\r\n//           <button  onClick={() => toggleUnit(1)} className=\"unit-button\">\r\n//             Unit 1: Basics\r\n//             {quizCompletedAlpha &&\r\n//               quizCompletedFinger &&\r\n//               quizCompletedGreetings && (\r\n//                 <span>üèÜ</span>\r\n//               )}\r\n//           </button>\r\n//           {openUnit === 1 && (\r\n//             <div  className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/lesson1\" className=\"lesson-link\">\r\n//                 Alphabet{\" \"}\r\n//                 {quizCompletedAlpha && (\r\n//                 <span>üèÜ</span>\r\n//               )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson2\" className=\"lesson-link\">\r\n//                 Finger Spelling{\" \"}\r\n//                 {quizCompletedFinger && (\r\n//                 <span>üèÜ</span>\r\n//                 )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson3\" className=\"lesson-link\">\r\n//                 Greetings{\" \"}\r\n//                 {quizCompletedGreetings && (\r\n//                   <span>üèÜ</span>\r\n//                 )}\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={progress}\r\n//                     text={`${progress}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizCompletedGreetings ? \"green\" : \"red\" },\r\n//                       text: { fill: quizCompletedGreetings ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n\r\n\r\n//               </Link>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div style={{fontSize: '25px' }} >\r\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\r\n//             Unit 2: Intermediate\r\n//             {quizCompletedGrammer &&\r\n//               quizCompletedNounAdj &&\r\n//               quizCompletedVerbColors && (\r\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//               )}\r\n//           </button>\r\n//           {openUnit === 2 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/lesson4\" className=\"lesson-link\">\r\n//                 Grammer{\" \"}\r\n//                 {quizCompletedGrammer && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson5/N_A\" className=\"lesson-link\">\r\n//                 Nouns and Adjectives{\" \"}\r\n//                 {quizCompletedNounAdj && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson6\" className=\"lesson-link\">\r\n//                 Verbs and Colors{\" \"}\r\n//                 {quizCompletedVerbColors && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )}\r\n//               </Link>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Unit 3 */}\r\n//         <div style={{fontSize: '25px' }} >\r\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\r\n//             Unit 3: Advanced\r\n//           </button>\r\n//           {openUnit === 3 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/lesson7\" className=\"lesson-link\">\r\n//                 Numbers{\" \"}\r\n//                 {/* {quizCompletedAlpha && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )} */}\r\n//               </Link>\r\n              \r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Final */}\r\n//         <div style={{fontSize: '25px' }}>\r\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\r\n//             Final Examination\r\n//           </button>\r\n//           {openUnit === 4 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/Final\" className=\"lesson-link\">\r\n//                 Final Exam{\" \"}\r\n//               {quizCompletedAlpha && (\r\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//               )}\r\n//             </Link>\r\n      \r\n//           </div>\r\n//         )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UnitSet;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import \"./UnitSet.css\";\r\n// import { CircularProgressbar } from \"react-circular-progressbar\";\r\n// import \"react-circular-progressbar/dist/styles.css\";\r\n\r\n// const UnitSet = () => {\r\n//   const [openUnit, setOpenUnit] = useState(null);\r\n//   const [quizStatus, setQuizStatus] = useState({\r\n//     alpha: false,\r\n//     finger: false,\r\n//     greetings: false,\r\n//     grammar: false,\r\n//     nounAdj: false,\r\n//     verbColors: false,\r\n//   });\r\n\r\n//   const userName = localStorage.getItem(\"userName\");\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuizStatus = async (lessonId, key) => {\r\n//       try {\r\n//         const response = await axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: { lessonId, userName },\r\n//         });\r\n//         if (response.data.lesson?.quiz_complete) {\r\n//           setQuizStatus((prev) => ({ ...prev, [key]: true }));\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(`Error fetching data for lesson ${lessonId}:`, error);\r\n//       }\r\n//     };\r\n\r\n//     if (userName) {\r\n//       fetchQuizStatus(\"101\", \"alpha\");\r\n//       fetchQuizStatus(\"102\", \"finger\");\r\n//       fetchQuizStatus(\"103\", \"greetings\");\r\n//       fetchQuizStatus(\"201\", \"grammar\");\r\n//       fetchQuizStatus(\"202\", \"nounAdj\");\r\n//       fetchQuizStatus(\"203\", \"verbColors\");\r\n//     }\r\n//   }, [userName]);\r\n\r\n//   const toggleUnit = (unit) => {\r\n//     setOpenUnit(openUnit === unit ? null : unit);\r\n//   };\r\n\r\n//   const handleNavigate = (path) => {\r\n//     navigate(path);\r\n//   };\r\n\r\n//   const progress = {\r\n//     alpha: quizStatus.alpha ? 100 : 0,\r\n//     finger: quizStatus.finger ? 100 : 0,\r\n//     greetings: quizStatus.greetings ? 100 : 0,\r\n//     grammar: quizStatus.grammar ? 100 : 0,\r\n//     nounAdj: quizStatus.nounAdj ? 100 : 0,\r\n//     verbColors: quizStatus.verbColors ? 100 : 0,\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"unitset-container\">\r\n//       <h1 style={{ fontSize: \"50px\" }}>Units Dashboard</h1>\r\n//       <div className=\"unitset-list\">\r\n//         {/* Unit 1 */}\r\n//         <div style={{ fontSize: \"25px\" }}>\r\n//           <button onClick={() => toggleUnit(1)} className=\"unit-button\">\r\n//             Unit 1: Basics\r\n//             {quizStatus.alpha && quizStatus.finger && quizStatus.greetings && <span>üèÜ</span>}\r\n//           </button>\r\n//           {openUnit === 1 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Alphabet {quizStatus.alpha && <span>üèÜ</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson1\")} className=\"lesson-button\">\r\n//                   Go to Alphabet Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.alpha ? 100 : 0}\r\n//                     text={`${quizStatus.alpha ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.alpha ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.alpha ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Finger Spelling {quizStatus.finger && <span>üèÜ</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson2\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.finger ? 100 : 0}\r\n//                     text={`${quizStatus.finger ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.finger ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.finger ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Greetings {quizStatus.greetings && <span>üèÜ</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson3\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.greetings ? 100 : 0}\r\n//                     text={`${quizStatus.greetings ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.greetings ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.greetings ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n  \r\n//         {/* Unit 2 */}\r\n//         <div style={{ fontSize: \"25px\" }}>\r\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\r\n//             Unit 2: Intermediate\r\n//             {quizStatus.grammar && quizStatus.nounAdj && quizStatus.verbColors && <span>‚úî</span>}\r\n//           </button>\r\n//           {openUnit === 2 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Grammar {quizStatus.grammar && <span>‚úî</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson4\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.grammar ? 100 : 0}\r\n//                     text={`${quizStatus.grammar ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.grammar ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.grammar ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Nouns and Adjectives {quizStatus.nounAdj && <span>‚úî</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson5/N_A\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.nounAdj ? 100 : 0}\r\n//                     text={`${quizStatus.nounAdj ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.nounAdj ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.nounAdj ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Verbs and Colors {quizStatus.verbColors && <span>‚úî</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson6\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.verbColors ? 100 : 0}\r\n//                     text={`${quizStatus.verbColors ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.verbColors ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.verbColors ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n  \r\n//         {/* Unit 3 */}\r\n//         <div style={{ fontSize: \"25px\" }}>\r\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\r\n//             Unit 3: Advanced\r\n//           </button>\r\n//           {openUnit === 3 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Numbers</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson7\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n  \r\n//         {/* Final */}\r\n//         <div style={{ fontSize: \"25px\" }}>\r\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\r\n//             Final Examination\r\n//           </button>\r\n//           {openUnit === 4 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Final Exam</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/Final\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UnitSet;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./UnitSet.css\";\r\nimport { CircularProgressbar } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nconst UnitSet = () => {\r\n  const [openUnit, setOpenUnit] = useState(null);\r\n  const [quizStatus, setQuizStatus] = useState({});\r\n  const userName = localStorage.getItem(\"userName\");\r\n  const navigate = useNavigate();\r\n\r\n  const lessons = {\r\n    1: [\r\n      { id: \"101\", key: \"alpha\", title: \"Alphabet\", path: \"/units/lesson1\" },\r\n      { id: \"102\", key: \"finger\", title: \"Finger Spelling\", path: \"/units/lesson2\" },\r\n      { id: \"103\", key: \"greetings\", title: \"Greetings\", path: \"/units/lesson3\" },\r\n    ],\r\n    2: [\r\n      { id: \"201\", key: \"grammar\", title: \"Grammar\", path: \"/units/lesson4\" },\r\n      { id: \"202\", key: \"nounAdj\", title: \"Nouns and Adjectives\", path: \"/units/lesson5/N_A\" },\r\n      { id: \"203\", key: \"verbColors\", title: \"Verbs and Colors\", path: \"/units/lesson6\" },\r\n    ],\r\n    3: [\r\n      { id: \"301\", key: \"numbers\", title: \"Numbers\", path: \"/units/lesson7\" },\r\n    ],\r\n    4: [\r\n      { id: \"401\", key: \"finalExam\", title: \"Final Exam\", path: \"/units/Final\" },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchQuizStatuses = async () => {\r\n      try {\r\n        const promises = Object.values(lessons)\r\n          .flat()\r\n          .map(({ id, key }) =>\r\n            axios\r\n              .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n                params: { lessonId: id, userName },\r\n              })\r\n              .then((response) => {\r\n                if (response.data.lesson?.quiz_complete) {\r\n                  setQuizStatus((prev) => ({ ...prev, [key]: true }));\r\n                }\r\n              })\r\n          );\r\n        await Promise.all(promises);\r\n      } catch (error) {\r\n        console.error(\"Error fetching quiz statuses:\", error);\r\n      }\r\n    };\r\n\r\n    if (userName) fetchQuizStatuses();\r\n  }, [userName]);\r\n\r\n  const toggleUnit = (unit) => {\r\n    setOpenUnit(openUnit === unit ? null : unit);\r\n  };\r\n\r\n  const handleNavigate = (path) => {\r\n    navigate(path);\r\n  };\r\n\r\n  const getProgress = (key) => (quizStatus[key] ? 100 : 0);\r\n\r\n  return (\r\n    <div className=\"unitset-container\">\r\n      <h1 style={{ fontSize: \"50px\" }}>Units Dashboard</h1>\r\n      <div className=\"unitset-list\">\r\n        {Object.entries(lessons).map(([unitNumber, unitLessons]) => (\r\n          <div style={{ fontSize: \"25px\" }} key={`unit-${unitNumber}`}>\r\n            <button\r\n              onClick={() => toggleUnit(unitNumber)}\r\n              className=\"unit-button\"\r\n            >\r\n              {`Unit ${unitNumber}: ${unitNumber === \"1\"\r\n                ? \"Basics\"\r\n                : unitNumber === \"2\"\r\n                ? \"Intermediate\"\r\n                : unitNumber === \"3\"\r\n                ? \"Advanced\"\r\n                : \"Final Examination\"\r\n              }`}\r\n              {unitLessons.every(({ key }) => quizStatus[key]) && <span>üèÜ</span>}\r\n            </button>\r\n            {openUnit === unitNumber && (\r\n              <div className=\"lesson-dropdown\">\r\n                {unitLessons.map(({ id, key, title, path }) => (\r\n                  <div className=\"lesson-container\" key={`lesson-${id}`}>\r\n                    <h3>\r\n                      {title} {quizStatus[key] && <span>üèÜ</span>}\r\n                    </h3>\r\n                    <button\r\n                      onClick={() => handleNavigate(path)}\r\n                      className=\"lesson-button\"\r\n                    >\r\n                      Go to Lesson\r\n                    </button>\r\n                    <div className=\"progress-container\">\r\n                      <CircularProgressbar\r\n                        value={getProgress(key)}\r\n                        text={`${getProgress(key)}%`}\r\n                        styles={{\r\n                          path: {\r\n                            stroke: quizStatus[key] ? \"green\" : \"red\",\r\n                          },\r\n                          text: {\r\n                            fill: quizStatus[key] ? \"green\" : \"red\",\r\n                          },\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnitSet;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}