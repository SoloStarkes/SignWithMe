{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './Number_Quiz.css';\n\n// // Importing images statically for use in dynamic mapping\n// import number0 from '../Letters/number00.png';\n// import number1 from '../Letters/number01.png';\n// import number2 from '../Letters/number02.png';\n// import number3 from '../Letters/number03.png';\n// import number4 from '../Letters/number04.png';\n// import number5 from '../Letters/number05.png';\n// import number6 from '../Letters/number06.png';\n// import number7 from '../Letters/number07.png';\n// import number8 from '../Letters/number08.png';\n// import number9 from '../Letters/number09.png';\n// import number10 from '../Letters/number10.gif';\n\n// // Map of numbers to images\n// const numberImages = {\n//     0: number0,\n//     1: number1,\n//     2: number2,\n//     3: number3,\n//     4: number4,\n//     5: number5,\n//     6: number6,\n//     7: number7,\n//     8: number8,\n//     9: number9,\n//     10: number10,\n// };\n// // Utility function to shuffle an array\n// const shuffleArray = (array) => {\n//     const shuffled = [...array];\n//     for (let i = shuffled.length - 1; i > 0; i--) {\n//         const j = Math.floor(Math.random() * (i + 1));\n//         [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n//     }\n//     return shuffled;\n// };\n\n// const Number_Quiz = () => {\n//     const [feedback, setFeedback] = useState('');\n//     const [feedbackColor, setFeedbackColor] = useState(''); // to store feedback color\n//     const [matchedCount, setMatchedCount] = useState(0);\n//     const [randomNumbers, setRandomNumbers] = useState([]); // stores random numbers\n//     const [shuffledImages, setShuffledImages] = useState([]); // stores shuffled images\n//     const totalMatches = 5;\n\n//     useEffect(() => {\n//         // Generate 5 unique random numbers between 0 and 10\n//         const generateRandomNumbers = () => {\n//             const numbers = new Set();\n//             while (numbers.size < 5) {\n//                 numbers.add(Math.floor(Math.random() * 11));\n//             }\n//             const randomNumArray = [...numbers];\n//             setRandomNumbers(randomNumArray);\n\n//             // Shuffle images based on the selected random numbers\n//             const selectedImages = randomNumArray.map((num) => numberImages[num]);\n//             setShuffledImages(shuffleArray(selectedImages));\n//         };\n\n//         generateRandomNumbers();\n//     }, []);\n\n//     const handleDrop = (event, number, imageIndex) => {\n//         event.preventDefault();\n//         const draggedNumber = event.dataTransfer.getData(\"text/plain\");\n\n//         // Check if the dragged number matches the drop zone's number\n//         if (draggedNumber === number.toString()) {\n//             setMatchedCount((prev) => prev + 1);\n//             setFeedback('Correct!');\n//             setFeedbackColor('green'); // Set color to green for correct\n//         } else {\n//             setFeedback('Incorrect number dropped! Try again.');\n//             setFeedbackColor('red'); // Set color to red for incorrect\n//         }\n\n//         // Display success message if all matches are completed\n//         if (matchedCount + 1 === totalMatches && draggedNumber === number.toString()) {\n//             setFeedback('Well done! You matched all the numbers correctly!');\n//             setFeedbackColor('green');\n//         }\n//     };\n\n//     const handleDragStart = (event) => {\n//         event.dataTransfer.setData(\"text/plain\", event.target.id);\n//     };\n\n//     return (\n//         <div className=\"number-quiz-container\">\n//             {/* ASL Number Matching Quiz Section */}\n//             <section className=\"asl-quiz-section\">\n//                 <header className=\"quiz-header\">\n//                     <h1 className=\"quiz-title\">ASL Number Matching Quiz</h1>\n//                     <p className=\"quiz-description\">Match the regular numbers to the correct ASL signs!</p>\n//                     <button className=\"learn-button\" onClick={() => window.location.href='/units/lesson7'}>Learn ASL Numbers</button>\n//                 </header>\n\n//                 <section className=\"matching-quiz-section\">\n//                     <div className=\"instructions\">\n//                         <p className=\"instruction-text\">Drag and drop each number to its corresponding ASL number card.</p>\n//                     </div>\n\n//                     <div className=\"matching-container\">\n//                         {/* Numbers */}\n//                         <div className=\"number-list\">\n//                             {randomNumbers.map((num) => (\n//                                 <div\n//                                     key={num}\n//                                     className=\"draggable-number\"\n//                                     id={num.toString()}\n//                                     draggable=\"true\"\n//                                     onDragStart={handleDragStart}\n//                                 >\n//                                     {num}\n//                                 </div>\n//                             ))}\n//                         </div>\n\n//                         {/* ASL Signs */}\n//                         <div className=\"asl-signs\">\n//                             {shuffledImages.map((image, index) => (\n//                                 <div\n//                                     key={index}\n//                                     className=\"asl-dropzone\"\n//                                     onDrop={(e) => handleDrop(e, randomNumbers[index], index)}\n//                                     onDragOver={(e) => e.preventDefault()}\n//                                     data-match={randomNumbers[index]}\n//                                 >\n//                                     <img className=\"asl-image\" src={image} alt={`ASL Sign`} />\n//                                 </div>\n//                             ))}\n//                         </div>\n//                     </div>\n\n//                     {/* Feedback */}\n//                     {feedback && (\n//                         <div id=\"feedback_Number\" className={`feedback-message ${feedbackColor}`}>\n//                             {feedback}\n//                         </div>\n//                     )}\n//                 </section>\n//             </section>\n//         </div>\n//     );\n// };\n\n// export default Number_Quiz;","map":{"version":3,"names":[],"sources":["/Users/brandonboston/Desktop/SignWithMe_Newest/SignWithMe-11-22-2024/sign-with-me/src/components/Number_Quiz.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './Number_Quiz.css';\n\n// // Importing images statically for use in dynamic mapping\n// import number0 from '../Letters/number00.png';\n// import number1 from '../Letters/number01.png';\n// import number2 from '../Letters/number02.png';\n// import number3 from '../Letters/number03.png';\n// import number4 from '../Letters/number04.png';\n// import number5 from '../Letters/number05.png';\n// import number6 from '../Letters/number06.png';\n// import number7 from '../Letters/number07.png';\n// import number8 from '../Letters/number08.png';\n// import number9 from '../Letters/number09.png';\n// import number10 from '../Letters/number10.gif';\n\n// // Map of numbers to images\n// const numberImages = {\n//     0: number0,\n//     1: number1,\n//     2: number2,\n//     3: number3,\n//     4: number4,\n//     5: number5,\n//     6: number6,\n//     7: number7,\n//     8: number8,\n//     9: number9,\n//     10: number10,\n// };\n// // Utility function to shuffle an array\n// const shuffleArray = (array) => {\n//     const shuffled = [...array];\n//     for (let i = shuffled.length - 1; i > 0; i--) {\n//         const j = Math.floor(Math.random() * (i + 1));\n//         [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n//     }\n//     return shuffled;\n// };\n\n// const Number_Quiz = () => {\n//     const [feedback, setFeedback] = useState('');\n//     const [feedbackColor, setFeedbackColor] = useState(''); // to store feedback color\n//     const [matchedCount, setMatchedCount] = useState(0);\n//     const [randomNumbers, setRandomNumbers] = useState([]); // stores random numbers\n//     const [shuffledImages, setShuffledImages] = useState([]); // stores shuffled images\n//     const totalMatches = 5;\n\n//     useEffect(() => {\n//         // Generate 5 unique random numbers between 0 and 10\n//         const generateRandomNumbers = () => {\n//             const numbers = new Set();\n//             while (numbers.size < 5) {\n//                 numbers.add(Math.floor(Math.random() * 11));\n//             }\n//             const randomNumArray = [...numbers];\n//             setRandomNumbers(randomNumArray);\n\n//             // Shuffle images based on the selected random numbers\n//             const selectedImages = randomNumArray.map((num) => numberImages[num]);\n//             setShuffledImages(shuffleArray(selectedImages));\n//         };\n\n//         generateRandomNumbers();\n//     }, []);\n\n//     const handleDrop = (event, number, imageIndex) => {\n//         event.preventDefault();\n//         const draggedNumber = event.dataTransfer.getData(\"text/plain\");\n\n//         // Check if the dragged number matches the drop zone's number\n//         if (draggedNumber === number.toString()) {\n//             setMatchedCount((prev) => prev + 1);\n//             setFeedback('Correct!');\n//             setFeedbackColor('green'); // Set color to green for correct\n//         } else {\n//             setFeedback('Incorrect number dropped! Try again.');\n//             setFeedbackColor('red'); // Set color to red for incorrect\n//         }\n\n//         // Display success message if all matches are completed\n//         if (matchedCount + 1 === totalMatches && draggedNumber === number.toString()) {\n//             setFeedback('Well done! You matched all the numbers correctly!');\n//             setFeedbackColor('green');\n//         }\n//     };\n\n//     const handleDragStart = (event) => {\n//         event.dataTransfer.setData(\"text/plain\", event.target.id);\n//     };\n\n//     return (\n//         <div className=\"number-quiz-container\">\n//             {/* ASL Number Matching Quiz Section */}\n//             <section className=\"asl-quiz-section\">\n//                 <header className=\"quiz-header\">\n//                     <h1 className=\"quiz-title\">ASL Number Matching Quiz</h1>\n//                     <p className=\"quiz-description\">Match the regular numbers to the correct ASL signs!</p>\n//                     <button className=\"learn-button\" onClick={() => window.location.href='/units/lesson7'}>Learn ASL Numbers</button>\n//                 </header>\n\n//                 <section className=\"matching-quiz-section\">\n//                     <div className=\"instructions\">\n//                         <p className=\"instruction-text\">Drag and drop each number to its corresponding ASL number card.</p>\n//                     </div>\n\n//                     <div className=\"matching-container\">\n//                         {/* Numbers */}\n//                         <div className=\"number-list\">\n//                             {randomNumbers.map((num) => (\n//                                 <div\n//                                     key={num}\n//                                     className=\"draggable-number\"\n//                                     id={num.toString()}\n//                                     draggable=\"true\"\n//                                     onDragStart={handleDragStart}\n//                                 >\n//                                     {num}\n//                                 </div>\n//                             ))}\n//                         </div>\n\n//                         {/* ASL Signs */}\n//                         <div className=\"asl-signs\">\n//                             {shuffledImages.map((image, index) => (\n//                                 <div\n//                                     key={index}\n//                                     className=\"asl-dropzone\"\n//                                     onDrop={(e) => handleDrop(e, randomNumbers[index], index)}\n//                                     onDragOver={(e) => e.preventDefault()}\n//                                     data-match={randomNumbers[index]}\n//                                 >\n//                                     <img className=\"asl-image\" src={image} alt={`ASL Sign`} />\n//                                 </div>\n//                             ))}\n//                         </div>\n//                     </div>\n\n//                     {/* Feedback */}\n//                     {feedback && (\n//                         <div id=\"feedback_Number\" className={`feedback-message ${feedbackColor}`}>\n//                             {feedback}\n//                         </div>\n//                     )}\n//                 </section>\n//             </section>\n//         </div>\n//     );\n// };\n\n// export default Number_Quiz;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}