{"ast":null,"code":"var _jsxFileName = \"/Users/brandonboston/Desktop/SignWithMe_Newest/SignWithMe_Newest/sign-with-me/src/components/UnitSet.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\"; // Import axios\n// import \"./UnitSet.css\";\n// import { CircularProgressbar } from \"react-circular-progressbar\";\n// import \"react-circular-progressbar/dist/styles.css\";\n\n// const UnitSet = () => {\n//   const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\n//   const [openLesson, setOpenLesson] = useState(null); // Tracks which lesson dropdown is open\n//   const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedFinger, setquizCompletedFinger] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedGrammer, setquizCompletedGrammer] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedNounAdj, setquizCompletedNounAdj] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedVerbColors, setquizCompletedVerbColors] = useState(false); // Tracks if the quiz for lesson 101 is completed\n\n//   // Check if the user is signed in and retrieve their username\n//   const userName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     if (userName) {\n//       // Unit 1\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"101\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedAlpha(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"102\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedFinger(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"103\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedGreetings(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       // Unit 2\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"201\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedGrammer(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"202\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedNounAdj(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"203\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedVerbColors(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n//     } else {\n//       setquizCompletedAlpha(false);\n//       setquizCompletedFinger(false);\n//       setquizCompletedGreetings(false);\n//       setquizCompletedGrammer(false);\n//       setquizCompletedNounAdj(false);\n//       setquizCompletedVerbColors(false);\n//     }\n//   }, [userName]);\n\n//   const toggleUnit = (unit) => {\n//     setOpenUnit(openUnit === unit ? null : unit);\n//     setOpenLesson(null); // Close any lesson dropdowns when toggling units\n//   };\n\n//   const toggleLesson = (lesson) => {\n//     setOpenLesson(openLesson === lesson ? null : lesson);\n//   };\n//   const progress = quizCompletedGreetings ? 100 : 0; // Progress is either 0% or 100%\n\n//   return (\n//     <div className=\"unitset-container\">\n//       <h1>Units Dashboard</h1>\n//       <div className=\"unitset-list\">\n//         {/* Unit 1 */}\n//         <div>\n//           <button onClick={() => toggleUnit(1)} className=\"unit-button\">\n//             Unit 1: Basics\n//             {quizCompletedAlpha &&\n//               quizCompletedFinger &&\n//               quizCompletedGreetings && (\n//                 <span>üèÜ</span>\n//               )}\n//           </button>\n//           {openUnit === 1 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/lesson1\" className=\"lesson-link\">\n//                 Alphabet{\" \"}\n//                 {quizCompletedAlpha && (\n//                 <span>üèÜ</span>\n//               )}\n//               </Link>\n//               <Link to=\"/units/lesson2\" className=\"lesson-link\">\n//                 Finger Spelling{\" \"}\n//                 {quizCompletedFinger && (\n//                 <span>üèÜ</span>\n//                 )}\n//               </Link>\n//               <Link to=\"/units/lesson3\" className=\"lesson-link\">\n//                 Greetings{\" \"}\n//                 {quizCompletedGreetings && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>üèÜ</span>\n//                 )}\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={progress}\n//                     text={`${progress}%`}\n//                     styles={{\n//                       path: { stroke: quizCompletedGreetings ? \"green\" : \"red\" },\n//                       text: { fill: quizCompletedGreetings ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n\n//               </Link>\n//             </div>\n//           )}\n//         </div>\n//         <div>\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\n//             Unit 2: Intermediate\n//             {quizCompletedGrammer &&\n//               quizCompletedNounAdj &&\n//               quizCompletedVerbColors && (\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//               )}\n//           </button>\n//           {openUnit === 2 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/lesson4\" className=\"lesson-link\">\n//                 Grammer{\" \"}\n//                 {quizCompletedGrammer && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )}\n//               </Link>\n//               <Link to=\"/units/lesson5/N_A\" className=\"lesson-link\">\n//                 Nouns and Adjectives{\" \"}\n//                 {quizCompletedNounAdj && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )}\n//               </Link>\n//               <Link to=\"/units/lesson6\" className=\"lesson-link\">\n//                 Verbs and Colors{\" \"}\n//                 {quizCompletedVerbColors && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )}\n//               </Link>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Unit 3 */}\n//         <div>\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\n//             Unit 3: Advanced\n//           </button>\n//           {openUnit === 3 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/lesson7\" className=\"lesson-link\">\n//                 Numbers{\" \"}\n//                 {/* {quizCompletedAlpha && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )} */}\n//               </Link>\n\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Final */}\n//         <div>\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\n//             Final Examination\n//           </button>\n//           {openUnit === 4 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/Final\" className=\"lesson-link\">\n//                 Final Exam{\" \"}\n//               {quizCompletedAlpha && (\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//               )}\n//             </Link>\n\n//           </div>\n//         )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default UnitSet;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./UnitSet.css\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UnitSet = () => {\n  _s();\n  const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\n  const [expandedLesson, setExpandedLesson] = useState(null); // Tracks the expanded lesson\n  const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false);\n  const [quizCompletedFinger, setquizCompletedFinger] = useState(false);\n  const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false);\n  const userName = localStorage.getItem(\"userName\");\n  useEffect(() => {\n    if (userName) {\n      axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n        params: {\n          lessonId: \"101\",\n          userName\n        }\n      }).then(res => {\n        if (res.data.lesson.quiz_complete) setquizCompletedAlpha(true);\n      });\n      axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n        params: {\n          lessonId: \"102\",\n          userName\n        }\n      }).then(res => {\n        if (res.data.lesson.quiz_complete) setquizCompletedFinger(true);\n      });\n      axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n        params: {\n          lessonId: \"103\",\n          userName\n        }\n      }).then(res => {\n        if (res.data.lesson.quiz_complete) setquizCompletedGreetings(true);\n      });\n    }\n  }, [userName]);\n  const toggleUnit = unit => {\n    setOpenUnit(openUnit === unit ? null : unit);\n    setExpandedLesson(null); // Close any expanded lessons when toggling units\n  };\n  const toggleLesson = lesson => {\n    setExpandedLesson(expandedLesson === lesson ? null : lesson);\n  };\n  const progress = quizCompletedGreetings ? 100 : 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unitset-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Units Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unitset-list\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleUnit(1),\n          className: \"unit-button\",\n          children: \"Unit 1: Basics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), openUnit === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"lesson-dropdown\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `lesson-box ${expandedLesson === \"alphabet\" ? \"expanded\" : \"\"}`,\n            onClick: () => toggleLesson(\"alphabet\"),\n            children: expandedLesson === \"alphabet\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"lesson-expanded-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Alphabet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-bar\",\n                children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n                  value: quizCompletedAlpha ? 100 : 0,\n                  text: `${quizCompletedAlpha ? 100 : 0}%`,\n                  styles: {\n                    path: {\n                      stroke: quizCompletedAlpha ? \"green\" : \"red\"\n                    },\n                    text: {\n                      fill: quizCompletedAlpha ? \"green\" : \"red\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 366,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/units/lesson1\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"continue-button\",\n                  children: \"Start Lesson\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Alphabet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `lesson-box ${expandedLesson === \"finger\" ? \"expanded\" : \"\"}`,\n            onClick: () => toggleLesson(\"finger\"),\n            children: expandedLesson === \"finger\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"lesson-expanded-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Finger Spelling\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"progress-bar\",\n                children: /*#__PURE__*/_jsxDEV(CircularProgressbar, {\n                  value: quizCompletedFinger ? 100 : 0,\n                  text: `${quizCompletedFinger ? 100 : 0}%`,\n                  styles: {\n                    path: {\n                      stroke: quizCompletedFinger ? \"green\" : \"red\"\n                    },\n                    text: {\n                      fill: quizCompletedFinger ? \"green\" : \"red\"\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 399,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 398,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/units/lesson2\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"continue-button\",\n                  children: \"Start Lesson\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Finger Spelling\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n};\n_s(UnitSet, \"L3l4FDtZu1yDBO1Usx9TiHnDELU=\");\n_c = UnitSet;\nexport default UnitSet;\nvar _c;\n$RefreshReg$(_c, \"UnitSet\");","map":{"version":3,"names":["React","useState","useEffect","Link","axios","CircularProgressbar","jsxDEV","_jsxDEV","UnitSet","_s","openUnit","setOpenUnit","expandedLesson","setExpandedLesson","quizCompletedAlpha","setquizCompletedAlpha","quizCompletedFinger","setquizCompletedFinger","quizCompletedGreetings","setquizCompletedGreetings","userName","localStorage","getItem","get","params","lessonId","then","res","data","lesson","quiz_complete","toggleUnit","unit","toggleLesson","progress","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","text","styles","path","stroke","fill","to","_c","$RefreshReg$"],"sources":["/Users/brandonboston/Desktop/SignWithMe_Newest/SignWithMe_Newest/sign-with-me/src/components/UnitSet.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import axios from \"axios\"; // Import axios\r\n// import \"./UnitSet.css\";\r\n// import { CircularProgressbar } from \"react-circular-progressbar\";\r\n// import \"react-circular-progressbar/dist/styles.css\";\r\n\r\n\r\n// const UnitSet = () => {\r\n//   const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\r\n//   const [openLesson, setOpenLesson] = useState(null); // Tracks which lesson dropdown is open\r\n//   const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedFinger, setquizCompletedFinger] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedGrammer, setquizCompletedGrammer] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedNounAdj, setquizCompletedNounAdj] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedVerbColors, setquizCompletedVerbColors] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n\r\n//   // Check if the user is signed in and retrieve their username\r\n//   const userName = localStorage.getItem(\"userName\");\r\n\r\n//   useEffect(() => {\r\n//     if (userName) {\r\n//       // Unit 1\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"101\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedAlpha(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"102\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedFinger(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"103\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedGreetings(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       // Unit 2\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"201\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedGrammer(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"202\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedNounAdj(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"203\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedVerbColors(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n//     } else {\r\n//       setquizCompletedAlpha(false);\r\n//       setquizCompletedFinger(false);\r\n//       setquizCompletedGreetings(false);\r\n//       setquizCompletedGrammer(false);\r\n//       setquizCompletedNounAdj(false);\r\n//       setquizCompletedVerbColors(false);\r\n//     }\r\n//   }, [userName]);\r\n\r\n//   const toggleUnit = (unit) => {\r\n//     setOpenUnit(openUnit === unit ? null : unit);\r\n//     setOpenLesson(null); // Close any lesson dropdowns when toggling units\r\n//   };\r\n\r\n//   const toggleLesson = (lesson) => {\r\n//     setOpenLesson(openLesson === lesson ? null : lesson);\r\n//   };\r\n//   const progress = quizCompletedGreetings ? 100 : 0; // Progress is either 0% or 100%\r\n\r\n//   return (\r\n//     <div className=\"unitset-container\">\r\n//       <h1>Units Dashboard</h1>\r\n//       <div className=\"unitset-list\">\r\n//         {/* Unit 1 */}\r\n//         <div>\r\n//           <button onClick={() => toggleUnit(1)} className=\"unit-button\">\r\n//             Unit 1: Basics\r\n//             {quizCompletedAlpha &&\r\n//               quizCompletedFinger &&\r\n//               quizCompletedGreetings && (\r\n//                 <span>üèÜ</span>\r\n//               )}\r\n//           </button>\r\n//           {openUnit === 1 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/lesson1\" className=\"lesson-link\">\r\n//                 Alphabet{\" \"}\r\n//                 {quizCompletedAlpha && (\r\n//                 <span>üèÜ</span>\r\n//               )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson2\" className=\"lesson-link\">\r\n//                 Finger Spelling{\" \"}\r\n//                 {quizCompletedFinger && (\r\n//                 <span>üèÜ</span>\r\n//                 )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson3\" className=\"lesson-link\">\r\n//                 Greetings{\" \"}\r\n//                 {quizCompletedGreetings && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>üèÜ</span>\r\n//                 )}\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={progress}\r\n//                     text={`${progress}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizCompletedGreetings ? \"green\" : \"red\" },\r\n//                       text: { fill: quizCompletedGreetings ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n\r\n\r\n//               </Link>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div>\r\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\r\n//             Unit 2: Intermediate\r\n//             {quizCompletedGrammer &&\r\n//               quizCompletedNounAdj &&\r\n//               quizCompletedVerbColors && (\r\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//               )}\r\n//           </button>\r\n//           {openUnit === 2 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/lesson4\" className=\"lesson-link\">\r\n//                 Grammer{\" \"}\r\n//                 {quizCompletedGrammer && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson5/N_A\" className=\"lesson-link\">\r\n//                 Nouns and Adjectives{\" \"}\r\n//                 {quizCompletedNounAdj && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson6\" className=\"lesson-link\">\r\n//                 Verbs and Colors{\" \"}\r\n//                 {quizCompletedVerbColors && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )}\r\n//               </Link>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Unit 3 */}\r\n//         <div>\r\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\r\n//             Unit 3: Advanced\r\n//           </button>\r\n//           {openUnit === 3 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/lesson7\" className=\"lesson-link\">\r\n//                 Numbers{\" \"}\r\n//                 {/* {quizCompletedAlpha && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )} */}\r\n//               </Link>\r\n              \r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Final */}\r\n//         <div>\r\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\r\n//             Final Examination\r\n//           </button>\r\n//           {openUnit === 4 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/Final\" className=\"lesson-link\">\r\n//                 Final Exam{\" \"}\r\n//               {quizCompletedAlpha && (\r\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//               )}\r\n//             </Link>\r\n      \r\n//           </div>\r\n//         )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UnitSet;\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport \"./UnitSet.css\";\r\nimport { CircularProgressbar } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nconst UnitSet = () => {\r\n  const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\r\n  const [expandedLesson, setExpandedLesson] = useState(null); // Tracks the expanded lesson\r\n  const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false);\r\n  const [quizCompletedFinger, setquizCompletedFinger] = useState(false);\r\n  const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false);\r\n\r\n  const userName = localStorage.getItem(\"userName\");\r\n\r\n  useEffect(() => {\r\n    if (userName) {\r\n      axios\r\n        .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n          params: { lessonId: \"101\", userName },\r\n        })\r\n        .then((res) => {\r\n          if (res.data.lesson.quiz_complete) setquizCompletedAlpha(true);\r\n        });\r\n      axios\r\n        .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n          params: { lessonId: \"102\", userName },\r\n        })\r\n        .then((res) => {\r\n          if (res.data.lesson.quiz_complete) setquizCompletedFinger(true);\r\n        });\r\n      axios\r\n        .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n          params: { lessonId: \"103\", userName },\r\n        })\r\n        .then((res) => {\r\n          if (res.data.lesson.quiz_complete) setquizCompletedGreetings(true);\r\n        });\r\n    }\r\n  }, [userName]);\r\n\r\n  const toggleUnit = (unit) => {\r\n    setOpenUnit(openUnit === unit ? null : unit);\r\n    setExpandedLesson(null); // Close any expanded lessons when toggling units\r\n  };\r\n\r\n  const toggleLesson = (lesson) => {\r\n    setExpandedLesson(expandedLesson === lesson ? null : lesson);\r\n  };\r\n\r\n  const progress = quizCompletedGreetings ? 100 : 0;\r\n\r\n  return (\r\n    <div className=\"unitset-container\">\r\n      <h1>Units Dashboard</h1>\r\n      <div className=\"unitset-list\">\r\n        <div>\r\n          <button onClick={() => toggleUnit(1)} className=\"unit-button\">\r\n            Unit 1: Basics\r\n          </button>\r\n          {openUnit === 1 && (\r\n            <div className=\"lesson-dropdown\">\r\n              <div\r\n                className={`lesson-box ${\r\n                  expandedLesson === \"alphabet\" ? \"expanded\" : \"\"\r\n                }`}\r\n                onClick={() => toggleLesson(\"alphabet\")}\r\n              >\r\n                {expandedLesson === \"alphabet\" ? (\r\n                  <div className=\"lesson-expanded-content\">\r\n                    <h2>Alphabet</h2>\r\n                    <div className=\"progress-bar\">\r\n                      <CircularProgressbar\r\n                        value={quizCompletedAlpha ? 100 : 0}\r\n                        text={`${quizCompletedAlpha ? 100 : 0}%`}\r\n                        styles={{\r\n                          path: {\r\n                            stroke: quizCompletedAlpha ? \"green\" : \"red\",\r\n                          },\r\n                          text: {\r\n                            fill: quizCompletedAlpha ? \"green\" : \"red\",\r\n                          },\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <Link to=\"/units/lesson1\">\r\n                      <button className=\"continue-button\">Start Lesson</button>\r\n                    </Link>\r\n                  </div>\r\n                ) : (\r\n                  <span>Alphabet</span>\r\n                )}\r\n              </div>\r\n\r\n              <div\r\n                className={`lesson-box ${\r\n                  expandedLesson === \"finger\" ? \"expanded\" : \"\"\r\n                }`}\r\n                onClick={() => toggleLesson(\"finger\")}\r\n              >\r\n                {expandedLesson === \"finger\" ? (\r\n                  <div className=\"lesson-expanded-content\">\r\n                    <h2>Finger Spelling</h2>\r\n                    <div className=\"progress-bar\">\r\n                      <CircularProgressbar\r\n                        value={quizCompletedFinger ? 100 : 0}\r\n                        text={`${quizCompletedFinger ? 100 : 0}%`}\r\n                        styles={{\r\n                          path: {\r\n                            stroke: quizCompletedFinger ? \"green\" : \"red\",\r\n                          },\r\n                          text: {\r\n                            fill: quizCompletedFinger ? \"green\" : \"red\",\r\n                          },\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <Link to=\"/units/lesson2\">\r\n                      <button className=\"continue-button\">Start Lesson</button>\r\n                    </Link>\r\n                  </div>\r\n                ) : (\r\n                  <span>Finger Spelling</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnitSet;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}