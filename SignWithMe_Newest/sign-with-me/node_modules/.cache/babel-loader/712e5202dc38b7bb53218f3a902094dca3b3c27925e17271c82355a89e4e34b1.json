{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import { Link } from \"react-router-dom\";\n// import axios from \"axios\"; // Import axios\n// import \"./UnitSet.css\";\n// import { CircularProgressbar } from \"react-circular-progressbar\";\n// import \"react-circular-progressbar/dist/styles.css\";\n\n// const UnitSet = () => {\n//   const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\n//   const [openLesson, setOpenLesson] = useState(null); // Tracks which lesson dropdown is open\n//   const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedFinger, setquizCompletedFinger] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedGrammer, setquizCompletedGrammer] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedNounAdj, setquizCompletedNounAdj] = useState(false); // Tracks if the quiz for lesson 101 is completed\n//   const [quizCompletedVerbColors, setquizCompletedVerbColors] = useState(false); // Tracks if the quiz for lesson 101 is completed\n\n//   // Check if the user is signed in and retrieve their username\n//   const userName = localStorage.getItem(\"userName\");\n\n//   useEffect(() => {\n//     if (userName) {\n//       // Unit 1\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"101\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedAlpha(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"102\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedFinger(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"103\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedGreetings(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       // Unit 2\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"201\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedGrammer(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"202\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedNounAdj(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n\n//       axios\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: {\n//             lessonId: \"203\", // Lesson ID to check\n//             userName: userName, // The userName from local storage\n//           },\n//         })\n//         .then((response) => {\n//           const lesson = response.data.lesson;\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n//           if (lesson && lesson.quiz_complete) {\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n//             setquizCompletedVerbColors(true);\n//           } else {\n//             console.log(\"Quiz Completed is false or not set.\");\n//           }\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching lesson data:\", error);\n//         });\n//     } else {\n//       setquizCompletedAlpha(false);\n//       setquizCompletedFinger(false);\n//       setquizCompletedGreetings(false);\n//       setquizCompletedGrammer(false);\n//       setquizCompletedNounAdj(false);\n//       setquizCompletedVerbColors(false);\n//     }\n//   }, [userName]);\n\n//   const toggleUnit = (unit) => {\n//     setOpenUnit(openUnit === unit ? null : unit);\n//     setOpenLesson(null); // Close any lesson dropdowns when toggling units\n//   };\n\n//   const toggleLesson = (lesson) => {\n//     setOpenLesson(openLesson === lesson ? null : lesson);\n//   };\n//   const progress = quizCompletedGreetings ? 100 : 0; // Progress is either 0% or 100%\n\n//   return (\n//     <div className=\"unitset-container\">\n//       <h1 style={{fontSize: '50px' }} >Units Dashboard</h1>\n//       <div className=\"unitset-list\">\n//         {/* Unit 1 */}\n//         <div style={{fontSize: '25px' }} >\n//           <button  onClick={() => toggleUnit(1)} className=\"unit-button\">\n//             Unit 1: Basics\n//             {quizCompletedAlpha &&\n//               quizCompletedFinger &&\n//               quizCompletedGreetings && (\n//                 <span>üèÜ</span>\n//               )}\n//           </button>\n//           {openUnit === 1 && (\n//             <div  className=\"lesson-dropdown\">\n//               <Link to=\"/units/lesson1\" className=\"lesson-link\">\n//                 Alphabet{\" \"}\n//                 {quizCompletedAlpha && (\n//                 <span>üèÜ</span>\n//               )}\n//               </Link>\n//               <Link to=\"/units/lesson2\" className=\"lesson-link\">\n//                 Finger Spelling{\" \"}\n//                 {quizCompletedFinger && (\n//                 <span>üèÜ</span>\n//                 )}\n//               </Link>\n//               <Link to=\"/units/lesson3\" className=\"lesson-link\">\n//                 Greetings{\" \"}\n//                 {quizCompletedGreetings && (\n//                   <span>üèÜ</span>\n//                 )}\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={progress}\n//                     text={`${progress}%`}\n//                     styles={{\n//                       path: { stroke: quizCompletedGreetings ? \"green\" : \"red\" },\n//                       text: { fill: quizCompletedGreetings ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n\n//               </Link>\n//             </div>\n//           )}\n//         </div>\n//         <div style={{fontSize: '25px' }} >\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\n//             Unit 2: Intermediate\n//             {quizCompletedGrammer &&\n//               quizCompletedNounAdj &&\n//               quizCompletedVerbColors && (\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//               )}\n//           </button>\n//           {openUnit === 2 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/lesson4\" className=\"lesson-link\">\n//                 Grammer{\" \"}\n//                 {quizCompletedGrammer && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )}\n//               </Link>\n//               <Link to=\"/units/lesson5/N_A\" className=\"lesson-link\">\n//                 Nouns and Adjectives{\" \"}\n//                 {quizCompletedNounAdj && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )}\n//               </Link>\n//               <Link to=\"/units/lesson6\" className=\"lesson-link\">\n//                 Verbs and Colors{\" \"}\n//                 {quizCompletedVerbColors && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )}\n//               </Link>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Unit 3 */}\n//         <div style={{fontSize: '25px' }} >\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\n//             Unit 3: Advanced\n//           </button>\n//           {openUnit === 3 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/lesson7\" className=\"lesson-link\">\n//                 Numbers{\" \"}\n//                 {/* {quizCompletedAlpha && (\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//                 )} */}\n//               </Link>\n\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Final */}\n//         <div style={{fontSize: '25px' }}>\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\n//             Final Examination\n//           </button>\n//           {openUnit === 4 && (\n//             <div className=\"lesson-dropdown\">\n//               <Link to=\"/units/Final\" className=\"lesson-link\">\n//                 Final Exam{\" \"}\n//               {quizCompletedAlpha && (\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n//               )}\n//             </Link>\n\n//           </div>\n//         )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default UnitSet;\n\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"./UnitSet.css\";\n// import { CircularProgressbar } from \"react-circular-progressbar\";\n// import \"react-circular-progressbar/dist/styles.css\";\n\n// const UnitSet = () => {\n//   const [openUnit, setOpenUnit] = useState(null);\n//   const [quizStatus, setQuizStatus] = useState({\n//     alpha: false,\n//     finger: false,\n//     greetings: false,\n//     grammar: false,\n//     nounAdj: false,\n//     verbColors: false,\n//   });\n\n//   const userName = localStorage.getItem(\"userName\");\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchQuizStatus = async (lessonId, key) => {\n//       try {\n//         const response = await axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n//           params: { lessonId, userName },\n//         });\n//         if (response.data.lesson?.quiz_complete) {\n//           setQuizStatus((prev) => ({ ...prev, [key]: true }));\n//         }\n//       } catch (error) {\n//         console.error(`Error fetching data for lesson ${lessonId}:`, error);\n//       }\n//     };\n\n//     if (userName) {\n//       fetchQuizStatus(\"101\", \"alpha\");\n//       fetchQuizStatus(\"102\", \"finger\");\n//       fetchQuizStatus(\"103\", \"greetings\");\n//       fetchQuizStatus(\"201\", \"grammar\");\n//       fetchQuizStatus(\"202\", \"nounAdj\");\n//       fetchQuizStatus(\"203\", \"verbColors\");\n//     }\n//   }, [userName]);\n\n//   const toggleUnit = (unit) => {\n//     setOpenUnit(openUnit === unit ? null : unit);\n//   };\n\n//   const handleNavigate = (path) => {\n//     navigate(path);\n//   };\n\n//   const progress = {\n//     alpha: quizStatus.alpha ? 100 : 0,\n//     finger: quizStatus.finger ? 100 : 0,\n//     greetings: quizStatus.greetings ? 100 : 0,\n//     grammar: quizStatus.grammar ? 100 : 0,\n//     nounAdj: quizStatus.nounAdj ? 100 : 0,\n//     verbColors: quizStatus.verbColors ? 100 : 0,\n//   };\n\n//   return (\n//     <div className=\"unitset-container\">\n//       <h1 style={{ fontSize: \"50px\" }}>Units Dashboard</h1>\n//       <div className=\"unitset-list\">\n//         {/* Unit 1 */}\n//         <div style={{ fontSize: \"25px\" }}>\n//           <button onClick={() => toggleUnit(1)} className=\"unit-button\">\n//             Unit 1: Basics\n//             {quizStatus.alpha && quizStatus.finger && quizStatus.greetings && <span>üèÜ</span>}\n//           </button>\n//           {openUnit === 1 && (\n//             <div className=\"lesson-dropdown\">\n//               <div className=\"lesson-container\">\n//                 <h3>Alphabet {quizStatus.alpha && <span>üèÜ</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson1\")} className=\"lesson-button\">\n//                   Go to Alphabet Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.alpha ? 100 : 0}\n//                     text={`${quizStatus.alpha ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.alpha ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.alpha ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//               <div className=\"lesson-container\">\n//                 <h3>Finger Spelling {quizStatus.finger && <span>üèÜ</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson2\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.finger ? 100 : 0}\n//                     text={`${quizStatus.finger ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.finger ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.finger ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//               <div className=\"lesson-container\">\n//                 <h3>Greetings {quizStatus.greetings && <span>üèÜ</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson3\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.greetings ? 100 : 0}\n//                     text={`${quizStatus.greetings ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.greetings ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.greetings ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Unit 2 */}\n//         <div style={{ fontSize: \"25px\" }}>\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\n//             Unit 2: Intermediate\n//             {quizStatus.grammar && quizStatus.nounAdj && quizStatus.verbColors && <span>‚úî</span>}\n//           </button>\n//           {openUnit === 2 && (\n//             <div className=\"lesson-dropdown\">\n//               <div className=\"lesson-container\">\n//                 <h3>Grammar {quizStatus.grammar && <span>‚úî</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson4\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.grammar ? 100 : 0}\n//                     text={`${quizStatus.grammar ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.grammar ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.grammar ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//               <div className=\"lesson-container\">\n//                 <h3>Nouns and Adjectives {quizStatus.nounAdj && <span>‚úî</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson5/N_A\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.nounAdj ? 100 : 0}\n//                     text={`${quizStatus.nounAdj ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.nounAdj ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.nounAdj ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//               <div className=\"lesson-container\">\n//                 <h3>Verbs and Colors {quizStatus.verbColors && <span>‚úî</span>}</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson6\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//                 <div className=\"progress-container\">\n//                   <CircularProgressbar\n//                     value={quizStatus.verbColors ? 100 : 0}\n//                     text={`${quizStatus.verbColors ? 100 : 0}%`}\n//                     styles={{\n//                       path: { stroke: quizStatus.verbColors ? \"green\" : \"red\" },\n//                       text: { fill: quizStatus.verbColors ? \"green\" : \"red\" },\n//                     }}\n//                   />\n//                 </div>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Unit 3 */}\n//         <div style={{ fontSize: \"25px\" }}>\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\n//             Unit 3: Advanced\n//           </button>\n//           {openUnit === 3 && (\n//             <div className=\"lesson-dropdown\">\n//               <div className=\"lesson-container\">\n//                 <h3>Numbers</h3>\n//                 <button onClick={() => handleNavigate(\"/units/lesson7\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n\n//         {/* Final */}\n//         <div style={{ fontSize: \"25px\" }}>\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\n//             Final Examination\n//           </button>\n//           {openUnit === 4 && (\n//             <div className=\"lesson-dropdown\">\n//               <div className=\"lesson-container\">\n//                 <h3>Final Exam</h3>\n//                 <button onClick={() => handleNavigate(\"/units/Final\")} className=\"lesson-button\">\n//                   Go to Lesson\n//                 </button>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default UnitSet;","map":{"version":3,"names":[],"sources":["/Users/brandonboston/Desktop/SignWithMe_Newest/SignWithMe_Newest/sign-with-me/src/components/UnitSet.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\n// import axios from \"axios\"; // Import axios\r\n// import \"./UnitSet.css\";\r\n// import { CircularProgressbar } from \"react-circular-progressbar\";\r\n// import \"react-circular-progressbar/dist/styles.css\";\r\n\r\n\r\n// const UnitSet = () => {\r\n//   const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\r\n//   const [openLesson, setOpenLesson] = useState(null); // Tracks which lesson dropdown is open\r\n//   const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedFinger, setquizCompletedFinger] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedGrammer, setquizCompletedGrammer] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedNounAdj, setquizCompletedNounAdj] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n//   const [quizCompletedVerbColors, setquizCompletedVerbColors] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n\r\n//   // Check if the user is signed in and retrieve their username\r\n//   const userName = localStorage.getItem(\"userName\");\r\n\r\n//   useEffect(() => {\r\n//     if (userName) {\r\n//       // Unit 1\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"101\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedAlpha(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"102\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedFinger(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"103\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedGreetings(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       // Unit 2\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"201\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedGrammer(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"202\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedNounAdj(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n\r\n//       axios\r\n//         .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: {\r\n//             lessonId: \"203\", // Lesson ID to check\r\n//             userName: userName, // The userName from local storage\r\n//           },\r\n//         })\r\n//         .then((response) => {\r\n//           const lesson = response.data.lesson;\r\n//           console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n//           if (lesson && lesson.quiz_complete) {\r\n//             console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n//             setquizCompletedVerbColors(true);\r\n//           } else {\r\n//             console.log(\"Quiz Completed is false or not set.\");\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error fetching lesson data:\", error);\r\n//         });\r\n//     } else {\r\n//       setquizCompletedAlpha(false);\r\n//       setquizCompletedFinger(false);\r\n//       setquizCompletedGreetings(false);\r\n//       setquizCompletedGrammer(false);\r\n//       setquizCompletedNounAdj(false);\r\n//       setquizCompletedVerbColors(false);\r\n//     }\r\n//   }, [userName]);\r\n\r\n//   const toggleUnit = (unit) => {\r\n//     setOpenUnit(openUnit === unit ? null : unit);\r\n//     setOpenLesson(null); // Close any lesson dropdowns when toggling units\r\n//   };\r\n\r\n//   const toggleLesson = (lesson) => {\r\n//     setOpenLesson(openLesson === lesson ? null : lesson);\r\n//   };\r\n//   const progress = quizCompletedGreetings ? 100 : 0; // Progress is either 0% or 100%\r\n\r\n//   return (\r\n//     <div className=\"unitset-container\">\r\n//       <h1 style={{fontSize: '50px' }} >Units Dashboard</h1>\r\n//       <div className=\"unitset-list\">\r\n//         {/* Unit 1 */}\r\n//         <div style={{fontSize: '25px' }} >\r\n//           <button  onClick={() => toggleUnit(1)} className=\"unit-button\">\r\n//             Unit 1: Basics\r\n//             {quizCompletedAlpha &&\r\n//               quizCompletedFinger &&\r\n//               quizCompletedGreetings && (\r\n//                 <span>üèÜ</span>\r\n//               )}\r\n//           </button>\r\n//           {openUnit === 1 && (\r\n//             <div  className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/lesson1\" className=\"lesson-link\">\r\n//                 Alphabet{\" \"}\r\n//                 {quizCompletedAlpha && (\r\n//                 <span>üèÜ</span>\r\n//               )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson2\" className=\"lesson-link\">\r\n//                 Finger Spelling{\" \"}\r\n//                 {quizCompletedFinger && (\r\n//                 <span>üèÜ</span>\r\n//                 )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson3\" className=\"lesson-link\">\r\n//                 Greetings{\" \"}\r\n//                 {quizCompletedGreetings && (\r\n//                   <span>üèÜ</span>\r\n//                 )}\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={progress}\r\n//                     text={`${progress}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizCompletedGreetings ? \"green\" : \"red\" },\r\n//                       text: { fill: quizCompletedGreetings ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n\r\n\r\n//               </Link>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div style={{fontSize: '25px' }} >\r\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\r\n//             Unit 2: Intermediate\r\n//             {quizCompletedGrammer &&\r\n//               quizCompletedNounAdj &&\r\n//               quizCompletedVerbColors && (\r\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//               )}\r\n//           </button>\r\n//           {openUnit === 2 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/lesson4\" className=\"lesson-link\">\r\n//                 Grammer{\" \"}\r\n//                 {quizCompletedGrammer && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson5/N_A\" className=\"lesson-link\">\r\n//                 Nouns and Adjectives{\" \"}\r\n//                 {quizCompletedNounAdj && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )}\r\n//               </Link>\r\n//               <Link to=\"/units/lesson6\" className=\"lesson-link\">\r\n//                 Verbs and Colors{\" \"}\r\n//                 {quizCompletedVerbColors && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )}\r\n//               </Link>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Unit 3 */}\r\n//         <div style={{fontSize: '25px' }} >\r\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\r\n//             Unit 3: Advanced\r\n//           </button>\r\n//           {openUnit === 3 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/lesson7\" className=\"lesson-link\">\r\n//                 Numbers{\" \"}\r\n//                 {/* {quizCompletedAlpha && (\r\n//                   <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//                 )} */}\r\n//               </Link>\r\n              \r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Final */}\r\n//         <div style={{fontSize: '25px' }}>\r\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\r\n//             Final Examination\r\n//           </button>\r\n//           {openUnit === 4 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <Link to=\"/units/Final\" className=\"lesson-link\">\r\n//                 Final Exam{\" \"}\r\n//               {quizCompletedAlpha && (\r\n//                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n//               )}\r\n//             </Link>\r\n      \r\n//           </div>\r\n//         )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UnitSet;\r\n\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import \"./UnitSet.css\";\r\n// import { CircularProgressbar } from \"react-circular-progressbar\";\r\n// import \"react-circular-progressbar/dist/styles.css\";\r\n\r\n// const UnitSet = () => {\r\n//   const [openUnit, setOpenUnit] = useState(null);\r\n//   const [quizStatus, setQuizStatus] = useState({\r\n//     alpha: false,\r\n//     finger: false,\r\n//     greetings: false,\r\n//     grammar: false,\r\n//     nounAdj: false,\r\n//     verbColors: false,\r\n//   });\r\n\r\n//   const userName = localStorage.getItem(\"userName\");\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     const fetchQuizStatus = async (lessonId, key) => {\r\n//       try {\r\n//         const response = await axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n//           params: { lessonId, userName },\r\n//         });\r\n//         if (response.data.lesson?.quiz_complete) {\r\n//           setQuizStatus((prev) => ({ ...prev, [key]: true }));\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(`Error fetching data for lesson ${lessonId}:`, error);\r\n//       }\r\n//     };\r\n\r\n//     if (userName) {\r\n//       fetchQuizStatus(\"101\", \"alpha\");\r\n//       fetchQuizStatus(\"102\", \"finger\");\r\n//       fetchQuizStatus(\"103\", \"greetings\");\r\n//       fetchQuizStatus(\"201\", \"grammar\");\r\n//       fetchQuizStatus(\"202\", \"nounAdj\");\r\n//       fetchQuizStatus(\"203\", \"verbColors\");\r\n//     }\r\n//   }, [userName]);\r\n\r\n//   const toggleUnit = (unit) => {\r\n//     setOpenUnit(openUnit === unit ? null : unit);\r\n//   };\r\n\r\n//   const handleNavigate = (path) => {\r\n//     navigate(path);\r\n//   };\r\n\r\n//   const progress = {\r\n//     alpha: quizStatus.alpha ? 100 : 0,\r\n//     finger: quizStatus.finger ? 100 : 0,\r\n//     greetings: quizStatus.greetings ? 100 : 0,\r\n//     grammar: quizStatus.grammar ? 100 : 0,\r\n//     nounAdj: quizStatus.nounAdj ? 100 : 0,\r\n//     verbColors: quizStatus.verbColors ? 100 : 0,\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"unitset-container\">\r\n//       <h1 style={{ fontSize: \"50px\" }}>Units Dashboard</h1>\r\n//       <div className=\"unitset-list\">\r\n//         {/* Unit 1 */}\r\n//         <div style={{ fontSize: \"25px\" }}>\r\n//           <button onClick={() => toggleUnit(1)} className=\"unit-button\">\r\n//             Unit 1: Basics\r\n//             {quizStatus.alpha && quizStatus.finger && quizStatus.greetings && <span>üèÜ</span>}\r\n//           </button>\r\n//           {openUnit === 1 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Alphabet {quizStatus.alpha && <span>üèÜ</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson1\")} className=\"lesson-button\">\r\n//                   Go to Alphabet Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.alpha ? 100 : 0}\r\n//                     text={`${quizStatus.alpha ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.alpha ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.alpha ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Finger Spelling {quizStatus.finger && <span>üèÜ</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson2\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.finger ? 100 : 0}\r\n//                     text={`${quizStatus.finger ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.finger ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.finger ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Greetings {quizStatus.greetings && <span>üèÜ</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson3\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.greetings ? 100 : 0}\r\n//                     text={`${quizStatus.greetings ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.greetings ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.greetings ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n  \r\n//         {/* Unit 2 */}\r\n//         <div style={{ fontSize: \"25px\" }}>\r\n//           <button onClick={() => toggleUnit(2)} className=\"unit-button\">\r\n//             Unit 2: Intermediate\r\n//             {quizStatus.grammar && quizStatus.nounAdj && quizStatus.verbColors && <span>‚úî</span>}\r\n//           </button>\r\n//           {openUnit === 2 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Grammar {quizStatus.grammar && <span>‚úî</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson4\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.grammar ? 100 : 0}\r\n//                     text={`${quizStatus.grammar ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.grammar ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.grammar ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Nouns and Adjectives {quizStatus.nounAdj && <span>‚úî</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson5/N_A\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.nounAdj ? 100 : 0}\r\n//                     text={`${quizStatus.nounAdj ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.nounAdj ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.nounAdj ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Verbs and Colors {quizStatus.verbColors && <span>‚úî</span>}</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson6\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//                 <div className=\"progress-container\">\r\n//                   <CircularProgressbar\r\n//                     value={quizStatus.verbColors ? 100 : 0}\r\n//                     text={`${quizStatus.verbColors ? 100 : 0}%`}\r\n//                     styles={{\r\n//                       path: { stroke: quizStatus.verbColors ? \"green\" : \"red\" },\r\n//                       text: { fill: quizStatus.verbColors ? \"green\" : \"red\" },\r\n//                     }}\r\n//                   />\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n  \r\n//         {/* Unit 3 */}\r\n//         <div style={{ fontSize: \"25px\" }}>\r\n//           <button onClick={() => toggleUnit(3)} className=\"unit-button\">\r\n//             Unit 3: Advanced\r\n//           </button>\r\n//           {openUnit === 3 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Numbers</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/lesson7\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n  \r\n//         {/* Final */}\r\n//         <div style={{ fontSize: \"25px\" }}>\r\n//           <button onClick={() => toggleUnit(4)} className=\"unit-button\">\r\n//             Final Examination\r\n//           </button>\r\n//           {openUnit === 4 && (\r\n//             <div className=\"lesson-dropdown\">\r\n//               <div className=\"lesson-container\">\r\n//                 <h3>Final Exam</h3>\r\n//                 <button onClick={() => handleNavigate(\"/units/Final\")} className=\"lesson-button\">\r\n//                   Go to Lesson\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UnitSet;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}