{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\"; // Import axios\nimport \"./UnitSet.css\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\nconst UnitSet = () => {\n  _s();\n  const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\n  const [openLesson, setOpenLesson] = useState(null); // Tracks which lesson dropdown is open\n  const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false); // Tracks if the quiz for lesson 101 is completed\n  const [quizCompletedFinger, setquizCompletedFinger] = useState(false); // Tracks if the quiz for lesson 101 is completed\n  const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false); // Tracks if the quiz for lesson 101 is completed\n  const [quizCompletedGrammer, setquizCompletedGrammer] = useState(false); // Tracks if the quiz for lesson 101 is completed\n  const [quizCompletedNounAdj, setquizCompletedNounAdj] = useState(false); // Tracks if the quiz for lesson 101 is completed\n  const [quizCompletedVerbColors, setquizCompletedVerbColors] = useState(false); // Tracks if the quiz for lesson 101 is completed\n\n  // Check if the user is signed in and retrieve their username\n  const userName = localStorage.getItem(\"userName\");\n  useEffect(() => {\n    if (userName) {\n      // Unit 1\n      axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n        params: {\n          lessonId: \"101\",\n          // Lesson ID to check\n          userName: userName // The userName from local storage\n        }\n      }).then(response => {\n        const lesson = response.data.lesson;\n        console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n        if (lesson && lesson.quiz_complete) {\n          console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n          setquizCompletedAlpha(true);\n        } else {\n          console.log(\"Quiz Completed is false or not set.\");\n        }\n      }).catch(error => {\n        console.error(\"Error fetching lesson data:\", error);\n      });\n      axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n        params: {\n          lessonId: \"102\",\n          // Lesson ID to check\n          userName: userName // The userName from local storage\n        }\n      }).then(response => {\n        const lesson = response.data.lesson;\n        console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n        if (lesson && lesson.quiz_complete) {\n          console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n          setquizCompletedFinger(true);\n        } else {\n          console.log(\"Quiz Completed is false or not set.\");\n        }\n      }).catch(error => {\n        console.error(\"Error fetching lesson data:\", error);\n      });\n      axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n        params: {\n          lessonId: \"103\",\n          // Lesson ID to check\n          userName: userName // The userName from local storage\n        }\n      }).then(response => {\n        const lesson = response.data.lesson;\n        console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n        if (lesson && lesson.quiz_complete) {\n          console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n          setquizCompletedGreetings(true);\n        } else {\n          console.log(\"Quiz Completed is false or not set.\");\n        }\n      }).catch(error => {\n        console.error(\"Error fetching lesson data:\", error);\n      });\n\n      // Unit 2\n      axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n        params: {\n          lessonId: \"201\",\n          // Lesson ID to check\n          userName: userName // The userName from local storage\n        }\n      }).then(response => {\n        const lesson = response.data.lesson;\n        console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n        if (lesson && lesson.quiz_complete) {\n          console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n          setquizCompletedGrammer(true);\n        } else {\n          console.log(\"Quiz Completed is false or not set.\");\n        }\n      }).catch(error => {\n        console.error(\"Error fetching lesson data:\", error);\n      });\n      axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n        params: {\n          lessonId: \"202\",\n          // Lesson ID to check\n          userName: userName // The userName from local storage\n        }\n      }).then(response => {\n        const lesson = response.data.lesson;\n        console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n        if (lesson && lesson.quiz_complete) {\n          console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n          setquizCompletedNounAdj(true);\n        } else {\n          console.log(\"Quiz Completed is false or not set.\");\n        }\n      }).catch(error => {\n        console.error(\"Error fetching lesson data:\", error);\n      });\n      axios.get(\"http://localhost:5001/api/lessons/get-lesson\", {\n        params: {\n          lessonId: \"203\",\n          // Lesson ID to check\n          userName: userName // The userName from local storage\n        }\n      }).then(response => {\n        const lesson = response.data.lesson;\n        console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\n        if (lesson && lesson.quiz_complete) {\n          console.log(\"Quiz Completed is true!\"); // Confirm quiz status\n          setquizCompletedVerbColors(true);\n        } else {\n          console.log(\"Quiz Completed is false or not set.\");\n        }\n      }).catch(error => {\n        console.error(\"Error fetching lesson data:\", error);\n      });\n    } else {\n      setquizCompletedAlpha(false);\n      setquizCompletedFinger(false);\n      setquizCompletedGreetings(false);\n      setquizCompletedGrammer(false);\n      setquizCompletedNounAdj(false);\n      setquizCompletedVerbColors(false);\n    }\n  }, [userName]);\n  const toggleUnit = unit => {\n    setOpenUnit(openUnit === unit ? null : unit);\n    setOpenLesson(null); // Close any lesson dropdowns when toggling units\n  };\n  const toggleLesson = lesson => {\n    setOpenLesson(openLesson === lesson ? null : lesson);\n  };\n  const progress = quizCompletedGreetings ? 100 : 0; // Progress is either 0% or 100%\n\n  // return (\n  //   <div className=\"unitset-container\">\n  //     <h1 style={{fontSize: '50px' }} >Units Dashboard</h1>\n  //     <div className=\"unitset-list\">\n  //       {/* Unit 1 */}\n  //       <div style={{fontSize: '25px' }} >\n  //         <button  onClick={() => toggleUnit(1)} className=\"unit-button\">\n  //           Unit 1: Basics\n  //           {quizCompletedAlpha &&\n  //             quizCompletedFinger &&\n  //             quizCompletedGreetings && (\n  //               <span>üèÜ</span>\n  //             )}\n  //         </button>\n  //         {openUnit === 1 && (\n  //           <div  className=\"lesson-dropdown\">\n  //             <Link to=\"/units/lesson1\" className=\"lesson-link\">\n  //               Alphabet{\" \"}\n  //               {quizCompletedAlpha && (\n  //               <span>üèÜ</span>\n  //             )}\n  //             </Link>\n  //             <Link to=\"/units/lesson2\" className=\"lesson-link\">\n  //               Finger Spelling{\" \"}\n  //               {quizCompletedFinger && (\n  //               <span>üèÜ</span>\n  //               )}\n  //             </Link>\n  //             <Link to=\"/units/lesson3\" className=\"lesson-link\">\n  //               Greetings{\" \"}\n  //               {quizCompletedGreetings && (\n  //                 <span>üèÜ</span>\n  //               )}\n  //               <div className=\"progress-container\">\n  //                 <CircularProgressbar\n  //                   value={progress}\n  //                   text={`${progress}%`}\n  //                   styles={{\n  //                     path: { stroke: quizCompletedGreetings ? \"green\" : \"red\" },\n  //                     text: { fill: quizCompletedGreetings ? \"green\" : \"red\" },\n  //                   }}\n  //                 />\n  //               </div>\n\n  //             </Link>\n  //           </div>\n  //         )}\n  //       </div>\n  //       <div style={{fontSize: '25px' }} >\n  //         <button onClick={() => toggleUnit(2)} className=\"unit-button\">\n  //           Unit 2: Intermediate\n  //           {quizCompletedGrammer &&\n  //             quizCompletedNounAdj &&\n  //             quizCompletedVerbColors && (\n  //               <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n  //             )}\n  //         </button>\n  //         {openUnit === 2 && (\n  //           <div className=\"lesson-dropdown\">\n  //             <Link to=\"/units/lesson4\" className=\"lesson-link\">\n  //               Grammer{\" \"}\n  //               {quizCompletedGrammer && (\n  //                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n  //               )}\n  //             </Link>\n  //             <Link to=\"/units/lesson5/N_A\" className=\"lesson-link\">\n  //               Nouns and Adjectives{\" \"}\n  //               {quizCompletedNounAdj && (\n  //                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n  //               )}\n  //             </Link>\n  //             <Link to=\"/units/lesson6\" className=\"lesson-link\">\n  //               Verbs and Colors{\" \"}\n  //               {quizCompletedVerbColors && (\n  //                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n  //               )}\n  //             </Link>\n  //           </div>\n  //         )}\n  //       </div>\n\n  //       {/* Unit 3 */}\n  //       <div style={{fontSize: '25px' }} >\n  //         <button onClick={() => toggleUnit(3)} className=\"unit-button\">\n  //           Unit 3: Advanced\n  //         </button>\n  //         {openUnit === 3 && (\n  //           <div className=\"lesson-dropdown\">\n  //             <Link to=\"/units/lesson7\" className=\"lesson-link\">\n  //               Numbers{\" \"}\n  //               {/* {quizCompletedAlpha && (\n  //                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n  //               )} */}\n  //             </Link>\n\n  //           </div>\n  //         )}\n  //       </div>\n\n  //       {/* Final */}\n  //       <div style={{fontSize: '25px' }}>\n  //         <button onClick={() => toggleUnit(4)} className=\"unit-button\">\n  //           Final Examination\n  //         </button>\n  //         {openUnit === 4 && (\n  //           <div className=\"lesson-dropdown\">\n  //             <Link to=\"/units/Final\" className=\"lesson-link\">\n  //               Final Exam{\" \"}\n  //             {quizCompletedAlpha && (\n  //               <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\n  //             )}\n  //           </Link>\n\n  //         </div>\n  //       )}\n  //       </div>\n  //     </div>\n  //   </div>\n  // );\n};\n_s(UnitSet, \"+l/wFyC2y9FecVO4J0ttejGudHs=\");\n_c = UnitSet;\nexport default UnitSet;\nvar _c;\n$RefreshReg$(_c, \"UnitSet\");","map":{"version":3,"names":["React","useState","useEffect","Link","axios","CircularProgressbar","UnitSet","_s","openUnit","setOpenUnit","openLesson","setOpenLesson","quizCompletedAlpha","setquizCompletedAlpha","quizCompletedFinger","setquizCompletedFinger","quizCompletedGreetings","setquizCompletedGreetings","quizCompletedGrammer","setquizCompletedGrammer","quizCompletedNounAdj","setquizCompletedNounAdj","quizCompletedVerbColors","setquizCompletedVerbColors","userName","localStorage","getItem","get","params","lessonId","then","response","lesson","data","console","log","quiz_complete","catch","error","toggleUnit","unit","toggleLesson","progress","_c","$RefreshReg$"],"sources":["/Users/brandonboston/Desktop/SignWithMe_Newest/SignWithMe_Newest/sign-with-me/src/components/UnitSet.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\"; // Import axios\r\nimport \"./UnitSet.css\";\r\nimport { CircularProgressbar } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\n\r\nconst UnitSet = () => {\r\n  const [openUnit, setOpenUnit] = useState(null); // Tracks which unit dropdown is open\r\n  const [openLesson, setOpenLesson] = useState(null); // Tracks which lesson dropdown is open\r\n  const [quizCompletedAlpha, setquizCompletedAlpha] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n  const [quizCompletedFinger, setquizCompletedFinger] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n  const [quizCompletedGreetings, setquizCompletedGreetings] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n  const [quizCompletedGrammer, setquizCompletedGrammer] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n  const [quizCompletedNounAdj, setquizCompletedNounAdj] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n  const [quizCompletedVerbColors, setquizCompletedVerbColors] = useState(false); // Tracks if the quiz for lesson 101 is completed\r\n\r\n  // Check if the user is signed in and retrieve their username\r\n  const userName = localStorage.getItem(\"userName\");\r\n\r\n  useEffect(() => {\r\n    if (userName) {\r\n      // Unit 1\r\n      axios\r\n        .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n          params: {\r\n            lessonId: \"101\", // Lesson ID to check\r\n            userName: userName, // The userName from local storage\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const lesson = response.data.lesson;\r\n          console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n          if (lesson && lesson.quiz_complete) {\r\n            console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n            setquizCompletedAlpha(true);\r\n          } else {\r\n            console.log(\"Quiz Completed is false or not set.\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching lesson data:\", error);\r\n        });\r\n\r\n      axios\r\n        .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n          params: {\r\n            lessonId: \"102\", // Lesson ID to check\r\n            userName: userName, // The userName from local storage\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const lesson = response.data.lesson;\r\n          console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n          if (lesson && lesson.quiz_complete) {\r\n            console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n            setquizCompletedFinger(true);\r\n          } else {\r\n            console.log(\"Quiz Completed is false or not set.\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching lesson data:\", error);\r\n        });\r\n      axios\r\n        .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n          params: {\r\n            lessonId: \"103\", // Lesson ID to check\r\n            userName: userName, // The userName from local storage\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const lesson = response.data.lesson;\r\n          console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n          if (lesson && lesson.quiz_complete) {\r\n            console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n            setquizCompletedGreetings(true);\r\n          } else {\r\n            console.log(\"Quiz Completed is false or not set.\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching lesson data:\", error);\r\n        });\r\n\r\n      // Unit 2\r\n      axios\r\n        .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n          params: {\r\n            lessonId: \"201\", // Lesson ID to check\r\n            userName: userName, // The userName from local storage\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const lesson = response.data.lesson;\r\n          console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n          if (lesson && lesson.quiz_complete) {\r\n            console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n            setquizCompletedGrammer(true);\r\n          } else {\r\n            console.log(\"Quiz Completed is false or not set.\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching lesson data:\", error);\r\n        });\r\n\r\n      axios\r\n        .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n          params: {\r\n            lessonId: \"202\", // Lesson ID to check\r\n            userName: userName, // The userName from local storage\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const lesson = response.data.lesson;\r\n          console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n          if (lesson && lesson.quiz_complete) {\r\n            console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n            setquizCompletedNounAdj(true);\r\n          } else {\r\n            console.log(\"Quiz Completed is false or not set.\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching lesson data:\", error);\r\n        });\r\n\r\n      axios\r\n        .get(\"http://localhost:5001/api/lessons/get-lesson\", {\r\n          params: {\r\n            lessonId: \"203\", // Lesson ID to check\r\n            userName: userName, // The userName from local storage\r\n          },\r\n        })\r\n        .then((response) => {\r\n          const lesson = response.data.lesson;\r\n          console.log(\"Lesson Data:\", lesson); // Log the fetched lesson\r\n          if (lesson && lesson.quiz_complete) {\r\n            console.log(\"Quiz Completed is true!\"); // Confirm quiz status\r\n            setquizCompletedVerbColors(true);\r\n          } else {\r\n            console.log(\"Quiz Completed is false or not set.\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching lesson data:\", error);\r\n        });\r\n    } else {\r\n      setquizCompletedAlpha(false);\r\n      setquizCompletedFinger(false);\r\n      setquizCompletedGreetings(false);\r\n      setquizCompletedGrammer(false);\r\n      setquizCompletedNounAdj(false);\r\n      setquizCompletedVerbColors(false);\r\n    }\r\n  }, [userName]);\r\n\r\n  const toggleUnit = (unit) => {\r\n    setOpenUnit(openUnit === unit ? null : unit);\r\n    setOpenLesson(null); // Close any lesson dropdowns when toggling units\r\n  };\r\n\r\n  const toggleLesson = (lesson) => {\r\n    setOpenLesson(openLesson === lesson ? null : lesson);\r\n  };\r\n  const progress = quizCompletedGreetings ? 100 : 0; // Progress is either 0% or 100%\r\n\r\n  // return (\r\n  //   <div className=\"unitset-container\">\r\n  //     <h1 style={{fontSize: '50px' }} >Units Dashboard</h1>\r\n  //     <div className=\"unitset-list\">\r\n  //       {/* Unit 1 */}\r\n  //       <div style={{fontSize: '25px' }} >\r\n  //         <button  onClick={() => toggleUnit(1)} className=\"unit-button\">\r\n  //           Unit 1: Basics\r\n  //           {quizCompletedAlpha &&\r\n  //             quizCompletedFinger &&\r\n  //             quizCompletedGreetings && (\r\n  //               <span>üèÜ</span>\r\n  //             )}\r\n  //         </button>\r\n  //         {openUnit === 1 && (\r\n  //           <div  className=\"lesson-dropdown\">\r\n  //             <Link to=\"/units/lesson1\" className=\"lesson-link\">\r\n  //               Alphabet{\" \"}\r\n  //               {quizCompletedAlpha && (\r\n  //               <span>üèÜ</span>\r\n  //             )}\r\n  //             </Link>\r\n  //             <Link to=\"/units/lesson2\" className=\"lesson-link\">\r\n  //               Finger Spelling{\" \"}\r\n  //               {quizCompletedFinger && (\r\n  //               <span>üèÜ</span>\r\n  //               )}\r\n  //             </Link>\r\n  //             <Link to=\"/units/lesson3\" className=\"lesson-link\">\r\n  //               Greetings{\" \"}\r\n  //               {quizCompletedGreetings && (\r\n  //                 <span>üèÜ</span>\r\n  //               )}\r\n  //               <div className=\"progress-container\">\r\n  //                 <CircularProgressbar\r\n  //                   value={progress}\r\n  //                   text={`${progress}%`}\r\n  //                   styles={{\r\n  //                     path: { stroke: quizCompletedGreetings ? \"green\" : \"red\" },\r\n  //                     text: { fill: quizCompletedGreetings ? \"green\" : \"red\" },\r\n  //                   }}\r\n  //                 />\r\n  //               </div>\r\n\r\n\r\n  //             </Link>\r\n  //           </div>\r\n  //         )}\r\n  //       </div>\r\n  //       <div style={{fontSize: '25px' }} >\r\n  //         <button onClick={() => toggleUnit(2)} className=\"unit-button\">\r\n  //           Unit 2: Intermediate\r\n  //           {quizCompletedGrammer &&\r\n  //             quizCompletedNounAdj &&\r\n  //             quizCompletedVerbColors && (\r\n  //               <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n  //             )}\r\n  //         </button>\r\n  //         {openUnit === 2 && (\r\n  //           <div className=\"lesson-dropdown\">\r\n  //             <Link to=\"/units/lesson4\" className=\"lesson-link\">\r\n  //               Grammer{\" \"}\r\n  //               {quizCompletedGrammer && (\r\n  //                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n  //               )}\r\n  //             </Link>\r\n  //             <Link to=\"/units/lesson5/N_A\" className=\"lesson-link\">\r\n  //               Nouns and Adjectives{\" \"}\r\n  //               {quizCompletedNounAdj && (\r\n  //                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n  //               )}\r\n  //             </Link>\r\n  //             <Link to=\"/units/lesson6\" className=\"lesson-link\">\r\n  //               Verbs and Colors{\" \"}\r\n  //               {quizCompletedVerbColors && (\r\n  //                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n  //               )}\r\n  //             </Link>\r\n  //           </div>\r\n  //         )}\r\n  //       </div>\r\n\r\n  //       {/* Unit 3 */}\r\n  //       <div style={{fontSize: '25px' }} >\r\n  //         <button onClick={() => toggleUnit(3)} className=\"unit-button\">\r\n  //           Unit 3: Advanced\r\n  //         </button>\r\n  //         {openUnit === 3 && (\r\n  //           <div className=\"lesson-dropdown\">\r\n  //             <Link to=\"/units/lesson7\" className=\"lesson-link\">\r\n  //               Numbers{\" \"}\r\n  //               {/* {quizCompletedAlpha && (\r\n  //                 <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n  //               )} */}\r\n  //             </Link>\r\n              \r\n  //           </div>\r\n  //         )}\r\n  //       </div>\r\n\r\n  //       {/* Final */}\r\n  //       <div style={{fontSize: '25px' }}>\r\n  //         <button onClick={() => toggleUnit(4)} className=\"unit-button\">\r\n  //           Final Examination\r\n  //         </button>\r\n  //         {openUnit === 4 && (\r\n  //           <div className=\"lesson-dropdown\">\r\n  //             <Link to=\"/units/Final\" className=\"lesson-link\">\r\n  //               Final Exam{\" \"}\r\n  //             {quizCompletedAlpha && (\r\n  //               <span style={{ color: \"green\", fontSize: \"1.5rem\" }}>‚úî</span>\r\n  //             )}\r\n  //           </Link>\r\n      \r\n  //         </div>\r\n  //       )}\r\n  //       </div>\r\n  //     </div>\r\n  //   </div>\r\n  // );\r\n};\r\n\r\nexport default UnitSet;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}